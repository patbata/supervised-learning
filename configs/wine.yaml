data: wine
scoring: 'f1_weighted'
k_folds: 5
stratified: False
# list of models to test
dt:
  params:
    max_depth: 3
    max_features: 5
    min_samples_leaf: 6
    min_samples_split: 8
    min_weight_fraction_leaf: 0.2
  hyperparams:
    max_depth: range(1,10)
    min_samples_split: np.arange(4,40,4)
    min_samples_leaf: np.arange(2,20,2)
    max_features: np.arange(5,15,1)
    min_weight_fraction_leaf: np.arange(0.1,0.4,0.1)
nn:
  params:
    hidden_layer_sizes: (50, 250, 100)
    activation: 'logistic'
    solver: 'adam'
    alpha: 0.1
    learning_rate_init: 0.01
  hyperparams:
    hidden_layer_sizes: np.arange(50,300,50)
#    depth_hidden_layer: range(1,5)
    activation: ['tanh', 'relu', 'logistic']
    solver: ['adam', 'sgd']
    alpha: [0.0001, 0.001, 0.01, 0.05, 0.1]
    learning_rate_init: [0.0001, 0.001, 0.01, 0.05, 0.1]
boost:
  params:
    n_estimators: 80
    learning_rate: 1
    estimator: 'RandomForest'
    algorithm: 'SAMME'
  hyperparams:
    algorithm: ['SAMME']
    estimator: ['DecisionTree', 'RandomForest']
    n_estimators: np.arange(50,210,10)
    learning_rate: [0.001, 0.05, 0.01, 0.1, 0.5, 1]
svm:
  scaler: MinMaxScaler
  params:
      C: 1
      gamma: 1
      kernel: 'rbf'
  hyperparams:
      C: [0.1, 1, 10, 100, 1000]
      gamma: [1, 0.1, 0.01, 0.001, 0.0001]
      kernel: ['rbf', 'linear', 'poly']
knn:
  params:
    n_neighbors: 5
    weights: 'distance'
    algorithm: 'ball_tree'
    leaf_size: 10
    p: 1
  hyperparams:
    n_neighbors: np.arange(1,10,1)
    weights: ['uniform', 'distance']
    algorithm: ['ball_tree', 'kd_tree', 'brute']
    leaf_size: np.arange(10,42,2)
    p: np.arange(1,3,1)

